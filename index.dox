/**
\mainpage rectangular_table_detection

\section links Links
GitHub repo
https://github.com/julesw/rectangle_table_detection/tree/master

Documentation (this)
http://julesw.github.io/rectangle_table_detection/html


\tableofcontents

\section sec_overview Overview

This is a ROS package, developped for <a href="http://www.ros.org">ROS Groovy</a>.

This package was created with the purpose of providing a table-detection
tool for robotic manipulation, or any other purpose. Most of the existing
table-detection tools only detects plane. We wanted a tool that could give
us dimensions of the table. We also needed to give the system some indications
about that table, so that it can 'choose' between several possibilities. These
indications are the normal of the plane, a bounding box were the plane table is 
expected to be, or at least a height range (for standard table we will be looking
for a plane that is normal to the vertical, and in the range 70 - 90 cm)

This package provides a tool for seeking a plane that is orthogonal to the 'z' axis
of a provided tf frame. It also provides an implementation of the filtering process (from pcl tutorial).
Contains an helpfull launcher, for demo.

\section sec_nodes Nodes
Here is a list of the nodes of the package and their parameters, published and subscribed topics, services, etc...

\subsection sec_node_detection Node ransac_plane_detection
Defined here: ransac_plane_detection.h.

\image html ransac_plane_detection_rqt20.png "rqthraph of the ransac_plane_detection node"
\image latex ransac_plane_detection_rqt20.png "rqthraph of the ransac_plane_detection node" width=\textwidth
\todo TODO change image !

The node that actually does the computation. It uses RanSAC methods for detecting the plane and its borders.

\subsubsection sec_detection_param Parameters
\par \p reference_tf (string, default: "/world")\n
The name of the reference frame. The program will seek a plane that is orthogonal to the z axis of this frame.

\par \p ransac_dist_threshold (float, default: 0.05)\n
Threshold for pcl ransac method, when searching for the table plane.

\par \p ransac_line_dist_threshold (float, default: 0.01)\n
Threshold for pcl ransac method when searching for borders of the table.

\note The value for this parameter should be choosen carrefuly. It is a common source of negatives detections,
as the lines detected can be different from the real ones, and then the program does not find a rectangle
in these lines.

\par \p concave_hull_alpha (float, default: 0.05)\n
The alpha parameter for the calc_concave_hull() function (the smaller, the more detailed is the hull). Only >0 values.

\par \p ransac_model_espilon (float, default: 0.05)\n
For pcl ransac method, the epsilon angle offset for plane matching.

\par \p ortho_rad_thresh (float, default: 0.08)\n
The angle threshold that will be used to determine if an angle is ~pi/2 (90Â°).

\par \p publish_outliers_pcl (boolean, default: false)\n
Choose to publish the outliers of the plane detection (all points but the plane).

\par \p publish_plane_pcl (boolean, default: false)\n
Choose to publish the point cloud of the detected table (inliers).

\par \p publish_hull_pcl (boolean, default: false)\n
Deprecated: only usefull for debug, should be removed.
Choose to publish the detected hull (for debug).

\par \p publish_marker_rviz (boolean, default: false)\n
Choose to publish an rviz marker to visualize detection results in rviz.

\par \p max_height (float, default: 0.9)\n
The maximal height of the table we search. (in meters)

\par \p min_height (float, default: 0.65)\n
The minimal height of the table we search. (in meters)

\subsubsection sec_detection_sub_topics Subscribed topics
\par \p ~input (sensor_msgs/PointCloud2)\n
Input pointcloud, organized or not (can be filtered)

\subsubsection sec_detection_pub_topics Published topics
\par \p ~output (sensor_msgs/PointCloud2)\n
Pointcloud of inliers (the pointcloud of the plane)

\subsubsection sec_detection_tf Published transform
\par /camera_depth_optical_frame -> /plane\n
The transform from the camera to the estimated center of the plane

\todo end node documentation \ref sec_node_detection 

\subsection sec_node_filtering Node simple_filtering
	directly from ros pcl tutorial http://www.ros.org/wiki/pcl/Tutorials
*/
